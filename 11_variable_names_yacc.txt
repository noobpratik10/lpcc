## Variable names
# expr.l file for lexical analysis

%{
    #include<stdio.h>
    #include<stdlib.h>
    #include "y.tab.h"   
%}

%%
    [a-zA-Z_][a-zA-Z0-9_]*     { return VAR; }
    [ \t\n]+                   { /*Ignore whitespaces*/ }
    .                          { return 0; }
%%

int yywrap() { return 1; }


# expr.y file for parsing and evaluating

%{
    #include <stdio.h>
    #include <stdlib.h>
%}

%token VAR

%%
    input:
        input VAR   { printf("valid variable name"); } |
                    { /*empty*/ }
    ;
%%

int main() {
    printf("Enter expression:\n");
    return yyparse();
}

int yyerror(const char *s) {
    fprintf(stderr, "Error: %s\n", s);
    return 1;
}


# run the following commands now to get the output
yacc -d var.y      # Generates y.tab.h and y.tab.c
lex var.l          # Generates lex.yy.c
gcc lex.yy.c y.tab.c -o var -lm
./var



## Convert the cases

# .l file
%{
#include <stdio.h>
#include <stdlib.h>
#include "y.tab.h"
%}

%%
[a-zA-Z]+     { yylval.str = strdup(yytext); return WORD; }
[ \t\n]+      ;  // Ignore spaces
.             ;  // Ignore other characters
%%

int yywrap() { return 1; }

# .y file to parse

%{
#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>

void convert_case(char *str);
%}

%union {
    char* str;
}

%token <str> WORD
%type <str> input

%%

input:
    input WORD { 
        convert_case($2);
        free($2);
    }
    | /* empty */
    ;

%%

void convert_case(char *str) {
    for (int i = 0; str[i]; i++) {
        if (islower(str[i]))
            putchar(toupper(str[i]));
        else if (isupper(str[i]))
            putchar(tolower(str[i]));
        else
            putchar(str[i]);
    }
    putchar('\n');
}

int main() {
    printf("Enter words (Ctrl+D to stop):\n");
    yyparse();
    return 0;
}

int yyerror(const char *s) {
    fprintf(stderr, "Error: %s\n", s);
    return 1;
}




#evaluate built in functions
%{
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include "y.tab.h"
%}

%%
[ \t\n]+               ; // Ignore whitespace

[a-zA-Z_][a-zA-Z0-9_]* { yylval.str = strdup(yytext); return ID; }

[0-9]+(\.[0-9]+)?      { yylval.fval = atof(yytext); return NUM; }

\"[^\"]*\"             { 
                          yylval.str = strdup(yytext); 
                          return STRING;
                       }

"="                    return '=';
"("                    return '(';
")"                    return ')';
","                    return ',';
.                      { return yytext[0]; }
%%

int yywrap() { return 1; }


%{
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>

void yyerror(const char *s);
%}

%union {
    float fval;
    char* str;
}

%token <str> ID STRING
%token <fval> NUM
%type <fval> expr

%%

stmt:
    ID '=' expr  { printf("%s = %.2f\n", $1, $3); free($1); }
    ;

expr:
    NUM              { $$ = $1; }
    | ID '(' expr ')' {
        if (strcmp($1, "sqrt") == 0) {
            $$ = sqrt($3);
        } else {
            printf("Unknown function: %s\n", $1);
            $$ = 0;
        }
        free($1);
    }
    | ID '(' STRING ')' {
        if (strcmp($1, "strlen") == 0) {
            $$ = strlen($3) - 2;  // exclude double quotes
        } else {
            printf("Unknown function: %s\n", $1);
            $$ = 0;
        }
        free($1); free($3);
    }
    ;

%%

int main() {
    printf("Enter expression:\n");
    yyparse();
    return 0;
}

void yyerror(const char *s) {
    fprintf(stderr, "Error: %s\n", s);
}


yacc -d func.y
lex func.l
gcc lex.yy.c y.tab.c -o func -lm
./func


%{
    #include <stdio.h>
    #include <stdlib.h>
    #include <math.h>
    #include "y.tab.h"
%}

%%
[ \t\n]+                   ;             // Ignore whitespace
[a-zA-Z_][a-zA-Z0-9_]*     { 
    if (strcmp(yytext, "sin") == 0) return SIN;
    if (strcmp(yytext, "cos") == 0) return COS;
    return VAR;
}
[0-9]+(\.[0-9]+)?          { yylval.fval = atof(yytext); return NUM; }
"="                        return '=';
"("                        return '(';
")"                        return ')';
"+"                        return '+';
"-"                        return '-';
"*"                        return '*';
"/"                        return '/';
.                          { printf("Unknown character: %s\n", yytext); }
%%


%{
    #include <stdio.h>
    #include <stdlib.h>
    #include <math.h>

    int yylex();
    int yyerror(const char *s) {
        printf("Error: %s\n", s);
        return 1;
    }
%}

%union {
    float fval;
    char* sval;
}

%token <fval> NUM
%token <sval> VAR
%token SIN COS
%type <fval> expr

%left '+' '-'
%left '*' '/'
%right UMINUS

%%
input:
    VAR '=' expr   { printf("%s = %.2f\n", $1, $3); free($1); }
  | expr           { printf("Result: %.2f\n", $1); }
  ;

expr:
    expr '+' expr      { $$ = $1 + $3; }
  | expr '-' expr      { $$ = $1 - $3; }
  | expr '*' expr      { $$ = $1 * $3; }
  | expr '/' expr      { $$ = $1 / $3; }
  | '-' expr %prec UMINUS { $$ = -$2; }
  | '(' expr ')'       { $$ = $2; }
  | SIN '(' expr ')'   { $$ = sin($3); }
  | COS '(' expr ')'   { $$ = cos($3); }
  | NUM                { $$ = $1; }
  ;
%%
int main() {
    printf("Enter an expression:\n");
    return yyparse();
}


