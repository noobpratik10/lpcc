# expr.l file for lexical analysis

%{
    #include<stdio.h>
    #include<stdlib.h>
    #include "y.tab.h"   // Needed to recognize `NUM`
%}

%%

[0-9]+(\.[0-9]+)?     { yylval.fval = atof(yytext); return NUM; }
[ \t]+                ;   // Ignore whitespaces
\n                    return 0;

"+"                   return '+';
"-"                   return '-';
"*"                   return '*';
"/"                   return '/';
"("                   return '(';
")"                   return ')';

.                     return yytext[0];

%%

int yywrap() { return 1; }


# expr.y file for parsing and evaluating

%{
    #include <stdio.h>
    #include <stdlib.h>
%}

%union {
    float fval;
}

%token <fval> NUM
%type <fval> expr

%left '+' '-'
%left '*' '/'
%right UMINUS

%%

input:
    expr { printf("Result: %.2f\n", $1); }
    ;

expr:
    expr '+' expr     { $$ = $1 + $3; }
  | expr '-' expr     { $$ = $1 - $3; }
  | expr '*' expr     { $$ = $1 * $3; }
  | expr '/' expr     { $$ = $1 / $3; }
  | '-' expr %prec UMINUS { $$ = -$2; }
  | '(' expr ')'      { $$ = $2; }
  | NUM               { $$ = $1; }
  ;

%%

int main() {
    printf("Enter expression:\n");
    return yyparse();
}

int yyerror(const char *s) {
    fprintf(stderr, "Error: %s\n", s);
    return 1;
}


# run the following commands now to get the output
yacc -d expr.y      # Generates y.tab.h and y.tab.c
lex expr.l          # Generates lex.yy.c
gcc lex.yy.c y.tab.c -o calc -lm
./calc




#expr.l code for lexical analysis
%{
    #include<stdio.h>
    #include<stdlib.h>
    #include "y.tab.h"  
%}

%%
    [0-9](\.[0-9]+)?      {yylval.fval=atof(yytext); return NUM;}
    [\t\n]                { /* ignore the whitespaces*/}
    "+"                   {return '+';}
    "-"                   {return '-';}
    "*"                   {return '*';}
    "/"                   {return '/';}
    "("                   {return '(';}
    ")"                   {return ')';}
    .                     {printf("%s -> Unknown character",yytext);}
%%

int main(){
    yylex();
}

int yywrap(){
    return 1;
}

#expr.y ode for parser
%{
    #include<stdio.h>
    #include<stdlib.h>    
%}

%union{
    float fval;
}

%token <fval> NUM;
%type <fval> expr;

%left '+' '-'
%left '*' '/'
%right UMINUS

%%
    input:
        expr      {printf("Result:%.2f\n",$1);}
    ;
    expr:
        expr '+' expr   {$$=$1+$3;} |
        expr '*' expr   {$$=$1*$3;} |
        expr '-' expr   {$$=$1-$3;} |
        expr '/' expr   {$$=$1/$3;} |
        '(' expr ')'    {$$=$2;} |
        '-' expr %prec UMINUS  {$$=-$2;}
        NUM    {$$=$1;}
    ;
%%

int main(){
    yyparse();
}

#instructions to run it
yacc -d expr.y
lex expr.l
gcc lex.yy.c y.tab.c -o calc -lm
./calc 